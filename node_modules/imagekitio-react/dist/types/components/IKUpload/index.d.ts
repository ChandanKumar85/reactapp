import React from 'react';
declare const IKUpload: React.ForwardRefExoticComponent<Pick<import("prop-types").InferPropsInner<Pick<{
    fileName: import("prop-types").Requireable<string>;
    tags: import("prop-types").Requireable<string[]>;
    useUniqueFileName: import("prop-types").Requireable<boolean>;
    responseFields: import("prop-types").Requireable<any[]>;
    isPrivateFile: import("prop-types").Requireable<boolean>;
    folder: import("prop-types").Requireable<string>;
    customCoordinates: import("prop-types").Requireable<string>;
    extensions: import("prop-types").Requireable<object[]>;
    webhookUrl: import("prop-types").Requireable<string>;
    overwriteFile: import("prop-types").Requireable<boolean>;
    overwriteAITags: import("prop-types").Requireable<boolean>;
    overwriteTags: import("prop-types").Requireable<boolean>;
    overwriteCustomMetadata: import("prop-types").Requireable<boolean>;
    customMetadata: import("prop-types").Requireable<any>;
    onError: import("prop-types").Requireable<(...args: any[]) => any>;
    onSuccess: import("prop-types").Requireable<(...args: any[]) => any>;
    onUploadStart: import("prop-types").Requireable<(...args: any[]) => any>;
    onUploadProgress: import("prop-types").Requireable<(...args: any[]) => any>;
    validateFile: import("prop-types").Requireable<(...args: any[]) => any>;
    ref: import("prop-types").Requireable<any>;
}, never>> & Partial<import("prop-types").InferPropsInner<Pick<{
    fileName: import("prop-types").Requireable<string>;
    tags: import("prop-types").Requireable<string[]>;
    useUniqueFileName: import("prop-types").Requireable<boolean>;
    responseFields: import("prop-types").Requireable<any[]>;
    isPrivateFile: import("prop-types").Requireable<boolean>;
    folder: import("prop-types").Requireable<string>;
    customCoordinates: import("prop-types").Requireable<string>;
    extensions: import("prop-types").Requireable<object[]>;
    webhookUrl: import("prop-types").Requireable<string>;
    overwriteFile: import("prop-types").Requireable<boolean>;
    overwriteAITags: import("prop-types").Requireable<boolean>;
    overwriteTags: import("prop-types").Requireable<boolean>;
    overwriteCustomMetadata: import("prop-types").Requireable<boolean>;
    customMetadata: import("prop-types").Requireable<any>;
    onError: import("prop-types").Requireable<(...args: any[]) => any>;
    onSuccess: import("prop-types").Requireable<(...args: any[]) => any>;
    onUploadStart: import("prop-types").Requireable<(...args: any[]) => any>;
    onUploadProgress: import("prop-types").Requireable<(...args: any[]) => any>;
    validateFile: import("prop-types").Requireable<(...args: any[]) => any>;
    ref: import("prop-types").Requireable<any>;
}, "ref" | "onError" | "fileName" | "tags" | "useUniqueFileName" | "responseFields" | "isPrivateFile" | "folder" | "customCoordinates" | "extensions" | "webhookUrl" | "overwriteFile" | "overwriteAITags" | "overwriteTags" | "overwriteCustomMetadata" | "customMetadata" | "onSuccess" | "onUploadStart" | "onUploadProgress" | "validateFile">>> & {
    useUniqueFileName?: boolean | undefined;
    tags?: string[] | undefined;
    folder?: string | undefined;
    isPrivateFile?: boolean | undefined;
    customCoordinates?: string | undefined;
    responseFields?: string[] | undefined;
    extensions?: object[] | undefined;
    webhookUrl?: string | undefined;
    overwriteFile?: boolean | undefined;
    overwriteAITags?: boolean | undefined;
    overwriteTags?: boolean | undefined;
    overwriteCustomMetadata?: boolean | undefined;
    customMetadata?: string | Record<string, string | number | boolean | (string | number | boolean)[]> | undefined;
    onError?: ((err: Error) => void) | undefined;
    onSuccess?: ((res: import("imagekit-javascript/dist/src/interfaces").UploadResponse) => void) | undefined;
    onUploadStart?: ((evt: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
    onUploadProgress?: ((evt: ProgressEvent<XMLHttpRequestEventTarget>) => void) | undefined;
    validateFile?: ((file: File) => boolean) | undefined;
} & React.InputHTMLAttributes<HTMLInputElement> & import("prop-types").InferPropsInner<Pick<{
    publicKey: import("prop-types").Requireable<string>;
    urlEndpoint: import("prop-types").Requireable<string>;
    authenticator: import("prop-types").Requireable<(...args: any[]) => any>;
}, never>> & Partial<import("prop-types").InferPropsInner<Pick<{
    publicKey: import("prop-types").Requireable<string>;
    urlEndpoint: import("prop-types").Requireable<string>;
    authenticator: import("prop-types").Requireable<(...args: any[]) => any>;
}, "urlEndpoint" | "publicKey" | "authenticator">>>, "urlEndpoint" | "publicKey" | "fileName" | "tags" | "useUniqueFileName" | "responseFields" | "isPrivateFile" | "folder" | "customCoordinates" | "extensions" | "webhookUrl" | "overwriteFile" | "overwriteAITags" | "overwriteTags" | "overwriteCustomMetadata" | "customMetadata" | "onSuccess" | "onUploadStart" | "onUploadProgress" | "validateFile" | "authenticator" | keyof React.InputHTMLAttributes<HTMLInputElement>> & React.RefAttributes<HTMLInputElement>>;
export default IKUpload;
